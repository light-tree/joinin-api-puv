using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Text;

namespace BusinessObject.Data
{
    public class Context : DbContext
    {
        public DbSet<ActiveUserCount> ActiveUserCounts { get; set; }
        public DbSet<Application> Applications { get; set; }
        public DbSet<ApplicationMajor> ApplicationMajors { get; set; }
        public DbSet<AssignedTask> AssignedTasks { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Feedback> Feedbacks { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<GroupMajor> GroupMajors { get; set; }
        public DbSet<Major> Majors { get; set; }
        public DbSet<Member> Members { get; set; }
        public DbSet<Milestone> Milestones { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<PlatformUserCount> PlatformUserCounts { get; set; }
        public DbSet<Models.Task> Tasks { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserMajor> UserMajors { get; set; }

        public Context()
        {

        }

        public Context(DbContextOptions options) : base(options)
        {

        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //MySql server's information
            //AWS
            //optionsBuilder.UseMySQL("Server=joinin-db.c0fsajjjhn3u.ap-southeast-1.rds.amazonaws.com;Uid=root;Pwd=MASTERKIEN1284;Database=joinin;Convert Zero Datetime=True;Allow Zero Datetime=True;");
            //Azure
            optionsBuilder.UseMySQL("Server=east-asia-database-server.mysql.database.azure.com;Uid=root1;Pwd=MasterKien1284;Database=joinin;Convert Zero Datetime=True;Allow Zero Datetime=True;");

            //Local
            //optionsBuilder.UseMySQL("server=localhost;database=join;user=root;password=MASTERKIEN1284;Convert Zero Datetime=True;Allow Zero Datetime=True;");
            //optionsBuilder.UseMySQL("server=localhost;database=joinin;user=root;password=123456;Convert Zero Datetime=True;Allow Zero Datetime=True;");
        }

        public override int SaveChanges()
        {
            var entitiesWithAutoGeneratedGuid = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added && HasIdProperty(e.Entity))
                .ToList();

            foreach (var entityEntry in entitiesWithAutoGeneratedGuid)
            {
                var idProperty = entityEntry.Metadata.FindProperty("Id");
                if (idProperty != null && idProperty.ClrType == typeof(Guid))
                {
                    var idValue = entityEntry.Property(idProperty.Name).CurrentValue;
                    if (idValue == null || (Guid)idValue == Guid.Empty)
                        entityEntry.Property(idProperty.Name).CurrentValue = Guid.NewGuid();
                }
            }

            return base.SaveChanges();
        }
        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var entitiesWithAutoGeneratedGuid = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added && HasIdProperty(e.Entity))
                .ToList();

            foreach (var entityEntry in entitiesWithAutoGeneratedGuid)
            {
                var idProperty = entityEntry.Metadata.FindProperty("Id");
                if (idProperty != null && idProperty.ClrType == typeof(Guid))
                {
                    var idValue = entityEntry.Property(idProperty.Name).CurrentValue;
                    if (idValue == null || (Guid)idValue == Guid.Empty)
                        entityEntry.Property(idProperty.Name).CurrentValue = Guid.NewGuid();
                }
            }

            return await base.SaveChangesAsync(cancellationToken);
        }

        private bool HasIdProperty(object entity)
        {
            var idProperty = entity.GetType().GetProperty("Id");
            return idProperty != null && idProperty.PropertyType == typeof(Guid);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>()
            .Property(e => e.CreatedDate)
            .IsRequired()
            .HasDefaultValueSql("(CURRENT_DATE())");

            /*Map Id for M-M table*/
            modelBuilder.Entity<ActiveUserCount>().HasKey(a => new { a.StartDate, a.EndDate });
            modelBuilder.Entity<ApplicationMajor>().HasKey(a => new { a.ApplicationId, a.MajorId });
            modelBuilder.Entity<GroupMajor>().HasKey(g => new { g.GroupId, g.MajorId });
            modelBuilder.Entity<AssignedTask>().HasKey(a => new { a.AssignedById, a.AssignedForId, a.TaskId });
            modelBuilder.Entity<UserMajor>().HasKey(u => new { u.UserId, u.MajorId });

            /*Disable cascade delete: ensures that deleting a User will not cascade-delete related Feedbacks.*/
            modelBuilder.Entity<Feedback>()
                .HasOne(f => f.FeedbackedFor)
                .WithMany(u => u.ReceivedFeedbacks)
                .HasForeignKey(f => f.FeedbackedForId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Feedback>()
                .HasOne(f => f.FeedbackedBy)
                .WithMany(u => u.SentFeedbacks)
                .HasForeignKey(f => f.FeedbackedById)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Models.Task>()
                .HasOne(m => m.MainTask)
                .WithMany(t => t.SubTasks)
                .HasForeignKey(t => t.MainTaskId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<AssignedTask>()
                .HasOne(m => m.Task)
                .WithMany(t => t.AssignedTasks)
                .HasForeignKey(t => t.TaskId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<AssignedTask>()
                .HasOne(f => f.AssignedFor)
                .WithMany(u => u.AssignedTasksFor)
                .HasForeignKey(f => f.AssignedForId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<AssignedTask>()
                .HasOne(f => f.AssignedBy)
                .WithMany(u => u.AssignedTasksBy)
                .HasForeignKey(f => f.AssignedById)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Group>()
                .HasOne(m => m.CurrentMilestone)
                .WithOne(t => t.GroupForCurrent)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Group>()
                .HasOne(m => m.CreatedBy)
                .WithOne(t => t.CreatedGroup)
                .OnDelete(DeleteBehavior.Restrict);

            /*Auto genarate Guid Id for tables*/
            modelBuilder.Entity<Application>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Comment>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Feedback>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Group>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Major>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Member>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Milestone>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Notification>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Models.Task>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<Transaction>().Property(a => a.Id).HasDefaultValueSql("(UUID())");

            modelBuilder.Entity<User>().Property(a => a.Id).HasDefaultValueSql("(UUID())");
        }
    }
}
