// <auto-generated />
using System;
using BusinessObject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230701132330_add_table_platform_user_counts")]
    partial class add_table_platform_user_counts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BusinessObject.Models.ActiveUserCount", b =>
                {
                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<int>("UserCount")
                        .HasColumnType("int")
                        .HasColumnName("user_count");

                    b.HasKey("StartDate", "EndDate");

                    b.ToTable("active_user_counts");
                });

            modelBuilder.Entity("BusinessObject.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("confirmed_date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("BusinessObject.Models.ApplicationMajor", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("application_id");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("major_id");

                    b.HasKey("ApplicationId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("application_majors");
                });

            modelBuilder.Entity("BusinessObject.Models.AssignedTask", b =>
                {
                    b.Property<Guid>("AssignedById")
                        .HasColumnType("char(36)")
                        .HasColumnName("assigned_by_id");

                    b.Property<Guid>("AssignedForId")
                        .HasColumnType("char(36)")
                        .HasColumnName("assigned_for_id");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_date");

                    b.HasKey("AssignedById", "AssignedForId", "TaskId");

                    b.HasIndex("AssignedForId");

                    b.HasIndex("TaskId");

                    b.ToTable("assigned_tasks");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)")
                        .HasColumnName("member_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("BusinessObject.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<Guid>("FeedbackedById")
                        .HasColumnType("char(36)")
                        .HasColumnName("feedbacked_by_id");

                    b.Property<Guid>("FeedbackedForId")
                        .HasColumnType("char(36)")
                        .HasColumnName("feedbacked_for_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<float>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackedById");

                    b.HasIndex("FeedbackedForId");

                    b.HasIndex("GroupId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("BusinessObject.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<string>("ClassName")
                        .HasColumnType("longtext")
                        .HasColumnName("class_name");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("CurrentMilestoneId")
                        .HasColumnType("char(36)")
                        .HasColumnName("current_milestone_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int")
                        .HasColumnName("group_size");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int")
                        .HasColumnName("member_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext")
                        .HasColumnName("school_name");

                    b.Property<string>("Skill")
                        .HasColumnType("longtext")
                        .HasColumnName("skill");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SubjectName")
                        .HasColumnType("longtext")
                        .HasColumnName("subject_name");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext")
                        .HasColumnName("theme");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .IsUnique();

                    b.HasIndex("CurrentMilestoneId")
                        .IsUnique();

                    b.ToTable("groups");
                });

            modelBuilder.Entity("BusinessObject.Models.GroupMajor", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("major_id");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int")
                        .HasColumnName("member_count");

                    b.HasKey("GroupId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("group_majors");
                });

            modelBuilder.Entity("BusinessObject.Models.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("majors");
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("joined_date");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("left_date");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("BusinessObject.Models.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("milestones");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BusinessObject.Models.PlatformUserCount", b =>
                {
                    b.Property<string>("PlatformName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("platform_name");

                    b.Property<int>("UserCount")
                        .HasColumnType("int")
                        .HasColumnName("user_count");

                    b.HasKey("PlatformName");

                    b.ToTable("platform_user_counts");
                });

            modelBuilder.Entity("BusinessObject.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDateDeadline")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date_deadline");

                    b.Property<int>("EstimatedDays")
                        .HasColumnType("int")
                        .HasColumnName("estimated_days");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("finished_date");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<int>("ImportantLevel")
                        .HasColumnType("int")
                        .HasColumnName("important_level");

                    b.Property<Guid?>("MainTaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("main_task_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDateDeadline")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date_deadline");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("MainTaskId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(CURRENT_DATE())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EndDatePremium")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date_premium");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login_date");

                    b.Property<string>("OtherContact")
                        .HasColumnType("longtext")
                        .HasColumnName("other_contact");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("skill");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext")
                        .HasColumnName("theme");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("longtext")
                        .HasColumnName("verify_code");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BusinessObject.Models.UserMajor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("major_id");

                    b.HasKey("UserId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("user_majors");
                });

            modelBuilder.Entity("BusinessObject.Models.Application", b =>
                {
                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("Applications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.ApplicationMajor", b =>
                {
                    b.HasOne("BusinessObject.Models.Application", "Application")
                        .WithMany("ApplicationMajors")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Major", "Major")
                        .WithMany("ApplicationMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("BusinessObject.Models.AssignedTask", b =>
                {
                    b.HasOne("BusinessObject.Models.Member", "AssignedBy")
                        .WithMany("AssignedTasksBy")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Member", "AssignedFor")
                        .WithMany("AssignedTasksFor")
                        .HasForeignKey("AssignedForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Task", "Task")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("AssignedFor");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Task", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "FeedbackedBy")
                        .WithMany("SentFeedbacks")
                        .HasForeignKey("FeedbackedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.User", "FeedbackedFor")
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("FeedbackedForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("Feedbacks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackedBy");

                    b.Navigation("FeedbackedFor");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObject.Models.Group", b =>
                {
                    b.HasOne("BusinessObject.Models.Member", "CreatedBy")
                        .WithOne("CreatedGroup")
                        .HasForeignKey("BusinessObject.Models.Group", "CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Models.Milestone", "CurrentMilestone")
                        .WithOne("GroupForCurrent")
                        .HasForeignKey("BusinessObject.Models.Group", "CurrentMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentMilestone");
                });

            modelBuilder.Entity("BusinessObject.Models.GroupMajor", b =>
                {
                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("GroupMajors")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Major", "Major")
                        .WithMany("GroupMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Milestone", b =>
                {
                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("Milestones")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObject.Models.Task", b =>
                {
                    b.HasOne("BusinessObject.Models.Member", "CreatedBy")
                        .WithMany("Tasks")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Task", "MainTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("MainTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("MainTask");
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.UserMajor", b =>
                {
                    b.HasOne("BusinessObject.Models.Major", "Major")
                        .WithMany("UserMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("UserMajors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Application", b =>
                {
                    b.Navigation("ApplicationMajors");
                });

            modelBuilder.Entity("BusinessObject.Models.Group", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Feedbacks");

                    b.Navigation("GroupMajors");

                    b.Navigation("Members");

                    b.Navigation("Milestones");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BusinessObject.Models.Major", b =>
                {
                    b.Navigation("ApplicationMajors");

                    b.Navigation("GroupMajors");

                    b.Navigation("UserMajors");
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.Navigation("AssignedTasksBy");

                    b.Navigation("AssignedTasksFor");

                    b.Navigation("CreatedGroup");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BusinessObject.Models.Milestone", b =>
                {
                    b.Navigation("GroupForCurrent");
                });

            modelBuilder.Entity("BusinessObject.Models.Task", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Comments");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Members");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("SentFeedbacks");

                    b.Navigation("Transactions");

                    b.Navigation("UserMajors");
                });
#pragma warning restore 612, 618
        }
    }
}
